#+STARTUP: indent
#+TITLE: Rust Programming
#+AUTHOR: Reader

* Rust 要解决什么问题
** 系统编程语言面临的两个困难：
- It’s difficult to write secure code.
- It’s very difficult to write multithreaded code,
  which is the only way to exploit the abilities of modern machines.

The key to meeting all these promises is Rust’s novel system of *ownership*, *moves*, and *borrows*,
checked at compile time and carefully designed to complement Rust’s flexible static type system.
- *Ownership*
- *Moves*
- *Borrows*

** Rust is not:
Rust is not really an object-oriented language,
 although it has some object-oriented characteristics.
Rust is not a functional language,
 although it does tend to make the influences on a computation’s result more explicit,
 as functional languages do.

** Rust is:
Rust is a type-safe language.
Some concepts:
- *Undefined Behavior* -- defined in C99
  Behavior, upon use of a nonportable or erroneous program construct or of erroneous data,
  for which this International Standard imposes no requirements.
- *Well Defined*
  If a program has been written so that no possible execution can exhibit undefined behavior,
  we say that program is well defined.
- *Type Safe*
  If a language’s safety checks ensure that every program is well defined,
  we say that language is type safe.

* Basic types
类型,关键看分类的方法.
还有一些概念需要澄清.
* Meomory Model 和数据类型
了解这个语言,或许应当从内存模型了解他的特色.由其当你有各种范式的开发经验时.
没见过那个语言如此严格精致地利用Momeory Model.
** Memory:
- a static set of *Items :* 编译时确定下来的一切东西.
- stack : Allocations in the stack consist of *Variables*
  Stack上的数据,在编译时就可以确定的.虽然底层也是根据地址来访问的,但语言理论中根本不会用什么概念来抽象这些地址,常见的Pointer概念也不会去抽象这种栈内地址.
  想想确实如此！
- heap  : Allocations in the heap  consist of *Boxes*
  Heap上的数据,其他不说,单说一点,Pointer是访问Heap数据的唯一途径.
  这使得问题复杂了,高级语言都会以各种方式避免Pointer成为直接的概念.
- 这就衍生出真正的问题: Variable and Value的概念内涵
  Rust中有什么独特之道呢？
** Ownership是理解Rust用意的关键.
Ownership有三条规则：
1. Each value in Rust has a variable that’s called its owner.
2. There can only be one owner for the value at a time.
3. When the owner goes out of scope, the value will be dropped.

*** Copy or Ownership Moving
Assignment
Passing a value to a Function
Return a value out of a Function

*** Reference => Borrowing
Reference:
- Reference
- Mutable Reference
- In Rust, References will never be dangling refernces!

Rules:
- At any given time, you can have either one mutable reference or any number of immutable references.
- References must always be valid.

Movement of Ownership or Binding.

** DataTypes 重点思考Ownership问题
Scalar Types: Integer Types, Float-Point Type, Boolean Type, Character Type
Compound Types: Tuples and Arrays

* 模块系统
** 模块系统所牵涉的一些内容:
- /Modules/, a way to organize code and control the privacy of paths
- /Paths/, a way to name items
- /use/, a keyword to bring a path into scope
- /pub/, a keyword to make items public
- Renaming items when bringing them into scope with the /as/ keyword
- Using external packages
- Nested paths to clean up large use lists
- Using the glob operator to bring everything in a module into scope
- How to split modules into individual files
  这个要注意一下.Rust的演化中,这一块的变动其实还是挺大的.现在没那么麻烦了!
** 其他不论,理解一下最后一条,模块的层次关系和文件目录的层次关系
模块系统有两个特有的概念:Crate和Modules.
A *crate* is a unit of compilation and linking, as well as versioning, distribution and runtime loading.
A crate contains a tree of nested *module* _scopes_.
- 从crate内部来看, 这棵树的顶层, 其实是个叫crate的模块. =这个叫crate的模块所对应的文件就是(src/lib.rs , src/main.rs)=.
- 这棵树和文件系统其实是解耦的, _模块的层次关系必须有显示的定义、声明_ ,不能单纯靠文件系统的层次关系来确定.
- 一个Rust文件定义了一个模块,但此模块的名字在外部定义,要么由引用文件的mod_item定义,要么就是Crate的名字.
  - 模块路径 crate 对应 src/lib.rs 或 src/main.rs
  - 模块路径 crate::X::Y::Z 对应 src/X/Y/Z.rs
  这样事情就简单多了.其他细节就不多说了.也不管以前的搞法了.
** 待补充

* struct, trait 透露出的是组合的味道
impl <trait> for <struct>
impl <struct>
