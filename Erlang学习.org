#+STARTUP: indent
#+TITLE: Erlang的学习笔记
#+AUTHOR: Reader

* 配置
** 镜像配置
例如在.bash_profile里配置
#+BEGIN_EXAMPLE

# hex.pm 国内镜像
export HEX_MIRROR="https://hexpm.upyun.com"
export HEX_CDN="https://hexpm.upyun.com"

#+END_EXAMPLE
** Emacs的配置
- Erlang: lsp-mode + (git clone https://github.com/erlang-ls/erlang_ls.git and ...)
- Elixir: lsp-mode + (git clone https://github.com/elixir-lsp/elixir-ls.git and ...)

* Erlang和Rebar3
* Elixir和Mix
** Naming Conventions
*** Casing
variables          => snake_case
function names     => snake_case
module attributes  => @snake_case
alias              => CamlCase
atoms              => :snake_case or :CamlCase
file names         => *snake_case* follows the module *SnakeCase* defined in the file
*** UnderScore(_foo)
Elixir relies on underscores in different situations.
*** Trailing Bang(!)
A trailing bang (exclamation mark) signifies a function or macro where failure cases raise an exception.
*** Trailing question mark(?)
Functions that return a boolean are named with a trailing question mark.
*** "is_" prefix
Type checks and other boolean checks that are allowed =in guard clauses= are named with an is_ prefix.
*** Special names
- "size" and "length" in function names have different means.
** Syntax References
*** Reserved words
- true, false, nil - used as atoms
- when, and, or, not, in - used as operators
- fn - used for anonymous function definitions
- do, end, catch, rescue, after, else - used in do/end blocks
*** Data Types
- Numbers
- Atoms
- Strings: "..."
- Charlist: '...'
- Lists,Tuples,Binaries: [] {} <<>>
- Maps,Keyword Lists: %{}
- Structs: %StructName{}
*** Expressions
- Variables
- Non-qualified calls(local calls)
- Operators
- Qualified calls
- Alias
- Blocks
- Left to right Arrows
- Sigils
*** The Elixir AST:
Elixir syntax was designed to have a straightforward conversion to an abstract syntax tree (AST).
Elixir's AST is a *regular Elixir data structure*.
We can retrieve the AST for any Elixir expression by calling *quote*.

* Phoenix 教程
** Install
依赖项的安装：erlang and rebar3, elixir, nodejs，postgresql/mysql/mariadb，inotify-tools.
注：postgresql 里有两个用户 postgres, archie(手工创建的). mariadb 里有两个用户 root, mysql.
   至于为什么,看Archlinux上的指南.
安装Phoenix：网上的教程有些滞后，用下法来安装

#+BEGIN_SRC bash
mix local.hex
mix archive.install hex phx_new [VERSION]
#+END_SRC

之后，例如，我干了这样的事：

#+BEGIN_SRC bash
cd ~/Projects
# Use the MariaDB.
mix phx.new menu --database mysql

cd menu
mix deps.get
cd assets && npm install && node node_modules/webpack/bin/webpack.js --mode development
cd ..

# Then configure your database in config/dev.exs and run:
mix ecto.create

# Startup Phoenix app with
mix phx.server
# Or run your app in IEx as:
# iex -S mix phx.server

#+END_SRC

